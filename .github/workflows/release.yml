name: üöÄ Release

on:
  push:
    branches: [main]

jobs:
  release:
    name: üè∑Ô∏è Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Run quality checks
        run: |
          npm run lint
          npm run format:check
          npm run test:ci

      - name: üìã Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: üè∑Ô∏è Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: üìù Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          if git tag --sort=-version:refname | head -n1 | grep -q .; then
            LAST_TAG=$(git tag --sort=-version:refname | head -n1)
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" --reverse)
          fi

          # Escape newlines for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üöÄ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: |
            ## What's Changed

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            npm install -g multisync
            ```

            ## Usage

            ```bash
            multisync --setup
            multisync --config=your-config.json
            ```

            ## Changelog

            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
